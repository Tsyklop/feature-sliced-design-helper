package design.featuresliced.helper.gui.form.settings.templates;

import com.intellij.openapi.actionSystem.ActionToolbarPosition;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.ComboBox;
import com.intellij.openapi.ui.DetailsComponent;
import com.intellij.ui.AnActionButton;
import com.intellij.ui.CollectionListModel;
import com.intellij.ui.OnePixelSplitter;
import com.intellij.ui.SimpleListCellRenderer;
import com.intellij.ui.ToolbarDecorator;
import com.intellij.ui.components.JBList;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.util.ui.JBUI;
import design.featuresliced.helper.actions.settings.toolbar.TemplatesToolbarCopyAction;
import design.featuresliced.helper.actions.settings.toolbar.TemplatesToolbarPasteAction;
import design.featuresliced.helper.gui.dialog.settings.TemplateAddEditDialog;
import design.featuresliced.helper.gui.dialog.settings.confirm.TemplateDeleteConfirmDialog;
import design.featuresliced.helper.model.settings.templates.Template;
import design.featuresliced.helper.model.type.fsd.LayerType;
import design.featuresliced.helper.model.type.template.TemplateStatusType;
import design.featuresliced.helper.service.ProjectTemplatesService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.Arrays;

public class TemplatesSettingsForm {

    private final Project project;

    private final DetailsComponent detailsComponent;

    private final ProjectTemplatesService projectTemplatesService;

    private final CollectionListModel<Template> templatesListModel;

    private JPanel root;

    private JPanel templatesListPanel;

    private OnePixelSplitter splitter;

    private JBList<Template> templatesList;

    private JComboBox<LayerType> layersComboBox;

    private AnActionButton copyActionButton;

    private AnActionButton pasteActionButton;

    private java.util.List<Template> removedTemplates = new ArrayList<>();

    public TemplatesSettingsForm(Project project) {
        this.project = project;
        this.detailsComponent = new DetailsComponent(false, true);
        this.detailsComponent.setEmptyContentText("Select template");
        this.detailsComponent.getContentGutter().getInsets().set(0, 5, 0, 5);
        this.templatesListModel = new CollectionListModel<>();
        this.projectTemplatesService = ProjectTemplatesService.getInstance(project);

        $$$setupUI$$$();

        fillForm((LayerType) this.layersComboBox.getSelectedItem());

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        root.setMinimumSize(new Dimension(-1, -1));
        root.setName("root");
        root.setPreferredSize(new Dimension(-1, -1));
        splitter.setName("rootSplitter");
        root.add(splitter, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    public boolean isModified() {
        return !this.removedTemplates.isEmpty() || this.templatesListModel.getItems().stream().anyMatch(Template::isNewOrChanged);
    }

    public java.util.List<Template> getNewTemplates() {
        return this.templatesListModel.getItems()
                .stream()
                .filter(Template::isNew)
                .toList();
    }

    public java.util.List<Template> getRemovedTemplates() {
        return this.removedTemplates;
    }

    public void clearRemovedTemplates() {
        this.removedTemplates.clear();
    }

    private void createUIComponents() {

        // TODO: place custom component creation code here
        this.splitter = new OnePixelSplitter(0.210f);

        JPanel leftPanel = new JPanel(new GridLayoutManager(3, 2, JBUI.emptyInsets(), -1, -1));

        leftPanel.add(new JLabel("Layer:"), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));

        this.layersComboBox = new ComboBox<>();

        this.layersComboBox.setRenderer(
                SimpleListCellRenderer.create((label, value, index) -> label.setText(value != null ? value.getLabel() : null))
        );
        Arrays.stream(LayerType.values()).forEach(this.layersComboBox::addItem);

        this.layersComboBox.addItemListener(e -> {
            if (e.getID() != ItemEvent.ITEM_STATE_CHANGED && e.getStateChange() != ItemEvent.SELECTED) {
                return;
            }
            this.templatesList.clearSelection();
            this.templatesListModel.removeAll();
            fillForm((LayerType) e.getItem());
            resetRightPanel();
        });

        leftPanel.add(this.layersComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));

        leftPanel.add(new JLabel("Templates:"), new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));

        this.templatesList = new JBList<>(this.templatesListModel);
        this.templatesList.setName("templatesList");

        this.templatesList.setCellRenderer(SimpleListCellRenderer.create((label, value, index) -> {

            String name = value != null ? value.getName() : null;

            if (value.getStatus() == TemplateStatusType.NEW) {
                name = name + "*";
            }

            label.setText(name);

        }));

        this.templatesList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.templatesList.getSelectionModel().addListSelectionListener(e -> {
            Template selectedTemplate = this.templatesList.getSelectedValue();
            if (selectedTemplate != null) {
                this.detailsComponent.setContent(new TemplateDetailsForm(project, selectedTemplate).getRoot());
            } else {
                resetRightPanel();
            }
        });

        ToolbarDecorator templatesListToolbarDecorator = ToolbarDecorator.createDecorator(templatesList)
                .initPosition()
                .setAddAction(anActionButton -> {

                    TemplateAddEditDialog dialog = new TemplateAddEditDialog(project, splitter);

                    if (!dialog.showAndGet()) {
                        return;
                    }

                    Template newTemplate = Template.createTemplate(dialog.getName(), (LayerType) this.layersComboBox.getSelectedItem());

                    this.templatesListModel.add(newTemplate);

                    this.templatesList.setSelectedValue(newTemplate, true);

                })
                .setEditAction(anActionButton -> {

                    Template selectedTemplate = templatesList.getSelectedValue();

                    if (selectedTemplate == null) {
                        return;
                    }

                    TemplateAddEditDialog dialog = new TemplateAddEditDialog(selectedTemplate.getName(), project, splitter);

                    if (!dialog.showAndGet()) {
                        return;
                    }

                    selectedTemplate.setName(dialog.getName());

                    //this.templatesListModel.allContentsChanged();

                })
                .setRemoveAction(anActionButton -> {

                    Template template = this.templatesList.getSelectedValue();

                    if (template == null) {
                        return;
                    }

                    if (new TemplateDeleteConfirmDialog(template, project, splitter).showAndGet()) {
                        template.changeStatusToRemovedIfPossible();
                        this.templatesList.getSelectionModel().clearSelection();
                        this.templatesListModel.remove(template);
                        this.removedTemplates.add(template);
                    }

                })
                .setToolbarPosition(ActionToolbarPosition.TOP);

        this.copyActionButton = new TemplatesToolbarCopyAction();
        this.pasteActionButton = new TemplatesToolbarPasteAction();

        this.copyActionButton.setEnabled(false);
        this.pasteActionButton.setEnabled(false);

        templatesListToolbarDecorator.addExtraActions((AnAction) copyActionButton, (AnAction) pasteActionButton);

        this.templatesListPanel = templatesListToolbarDecorator.createPanel();
        this.templatesListPanel.setName("templatesListPanel");

        leftPanel.add(this.templatesListPanel, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));

        this.splitter.setFirstComponent(leftPanel);

        resetRightPanel();

        JPanel rootRightPanel = new JPanel(new BorderLayout());
        rootRightPanel.setName("rootRightPanel");
        rootRightPanel.add(this.detailsComponent.getComponent(), BorderLayout.CENTER);

        this.splitter.setSecondComponent(rootRightPanel);

    }

    private void fillForm(LayerType selectedLayer) {
        for (Template template : this.projectTemplatesService.getState().getTemplatesBy(selectedLayer)) {
            templatesListModel.add(template);
        }
    }

    private void resetRightPanel() {
        this.detailsComponent.setContent(null);
    }

}
