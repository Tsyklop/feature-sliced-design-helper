package design.featuresliced.helper.gui.form.settings;

import com.intellij.ide.actions.OpenProjectFileChooserDescriptor;
import com.intellij.openapi.Disposable;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.project.ProjectUtil;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.ui.IdeBorderFactory;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import design.featuresliced.helper.model.settings.ProjectGeneralSettings;
import design.featuresliced.helper.model.type.fsd.LayerType;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class GeneralSettingsForm implements BaseSettingsForm, Disposable {

    private final Project project;

    private JPanel root;
    private TextFieldWithBrowseButton sourceRootTextField;
    private JTextField appLayerTextField;
    private JTextField pagesLayerTextField;
    private JTextField sharedLayerTextField;
    private JTextField widgetsLayerTextField;
    private JTextField entitiesLayerTextField;
    private JTextField featuresLayerTextField;
    private JTextField processesLayerTextField;

    public GeneralSettingsForm(Project project) {
        this.project = project;

        this.sourceRootTextField.addBrowseFolderListener(
                "Choose custom sources folder",
                "",
                project,
                new OpenProjectFileChooserDescriptor(false, false).withRoots(ProjectUtil.guessProjectDir(project))
        );

        /*new ComponentValidator(this).withValidator(() -> {
            String appLayerName = this.appLayerTextField.getText();
            if (StringUtils.isEmpty(appLayerName)) {
                return new ValidationInfo("Enter app layer name", this.appLayerTextField);
            }
            return null;
        }).andStartOnFocusLost().installOn(this.appLayerTextField);

        new ComponentValidator(this).withValidator(() -> {
            String pagesLayerName = this.pagesLayerTextField.getText();
            if (StringUtils.isEmpty(pagesLayerName)) {
                return new ValidationInfo("Enter pages layer name", this.pagesLayerTextField);
            }
            return null;
        }).andStartOnFocusLost().installOn(this.pagesLayerTextField);

        new ComponentValidator(this).withValidator(() -> {
            String sharedLayerName = this.sharedLayerTextField.getText();
            if (StringUtils.isEmpty(sharedLayerName)) {
                return new ValidationInfo("Enter shared layer name", this.sharedLayerTextField);
            }
            return null;
        }).andStartOnFocusLost().installOn(this.sharedLayerTextField);

        new ComponentValidator(this).withValidator(() -> {
            String widgetsLayerName = this.widgetsLayerTextField.getText();
            if (StringUtils.isEmpty(widgetsLayerName)) {
                return new ValidationInfo("Enter widgets layer name", this.widgetsLayerTextField);
            }
            return null;
        }).andStartOnFocusLost().installOn(this.widgetsLayerTextField);*/

        /*ComponentValidator componentValidator = new ComponentValidator(this).withValidator(() -> {
            String appLayerName = this.appLayerTextField.getText();
            if (StringUtils.isEmpty(appLayerName)) {
                return new ValidationInfo("Enter app layer name", this.appLayerTextField);
            }
            String pagesLayerName = this.pagesLayerTextField.getText();
            if (StringUtils.isEmpty(pagesLayerName)) {
                return new ValidationInfo("Enter pages layer name", this.pagesLayerTextField);
            }
            String sharedLayerName = this.sharedLayerTextField.getText();
            if (StringUtils.isEmpty(sharedLayerName)) {
                return new ValidationInfo("Enter shared layer name", this.sharedLayerTextField);
            }
            String widgetsLayerName = this.widgetsLayerTextField.getText();
            if (StringUtils.isEmpty(widgetsLayerName)) {
                return new ValidationInfo("Enter widgets layer name", this.widgetsLayerTextField);
            }
            return null;
        }).installOn(this.root);*/

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        root.setMaximumSize(new Dimension(-1, 305));
        root.setMinimumSize(new Dimension(400, 305));
        root.setPreferredSize(new Dimension(400, 305));
        final JLabel label1 = new JLabel();
        label1.setText("Source Root:");
        root.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sourceRootTextField = new TextFieldWithBrowseButton();
        sourceRootTextField.setEditable(false);
        sourceRootTextField.setOpaque(true);
        root.add(sourceRootTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        root.add(panel1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel1.setBorder(IdeBorderFactory.PlainSmallWithIndent.createTitledBorder(BorderFactory.createLineBorder(Color.black), "Layers custom name", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label2 = new JLabel();
        label2.setText("App:");
        panel1.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        appLayerTextField = new JTextField();
        panel1.add(appLayerTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Pages:");
        panel1.add(label3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Shared:");
        panel1.add(label4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Widgets:");
        panel1.add(label5, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Entities:");
        panel1.add(label6, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("Processes:");
        panel1.add(label7, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("Features:");
        panel1.add(label8, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pagesLayerTextField = new JTextField();
        panel1.add(pagesLayerTextField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        sharedLayerTextField = new JTextField();
        panel1.add(sharedLayerTextField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        widgetsLayerTextField = new JTextField();
        panel1.add(widgetsLayerTextField, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        entitiesLayerTextField = new JTextField();
        panel1.add(entitiesLayerTextField, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        featuresLayerTextField = new JTextField();
        panel1.add(featuresLayerTextField, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        processesLayerTextField = new JTextField();
        panel1.add(processesLayerTextField, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        root.add(spacer1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    @Override
    public JPanel getRoot() {
        return this.root;
    }

    public String getSourceRoot() {
        return this.sourceRootTextField.getText();//.replace(this.project.getBasePath(), "");
    }

    public @Nullable String getLayerCustomFolderNameBy(@NotNull LayerType type) {
        return switch (type) {
            case APP -> this.appLayerTextField.getText();
            case PAGES -> this.pagesLayerTextField.getText();
            case SHARED -> this.sharedLayerTextField.getText();
            case WIDGETS -> this.widgetsLayerTextField.getText();
            case ENTITIES -> this.entitiesLayerTextField.getText();
            case FEATURES -> this.featuresLayerTextField.getText();
            case PROCESSES -> this.processesLayerTextField.getText();
        };
    }

    public void fillFrom(@Nullable ProjectGeneralSettings settings) {

        if (settings == null) {
            return;
        }

        this.sourceRootTextField.setText(settings.getSourcesFolder());

        settings.getLayerCustomFolderNameBy(LayerType.APP).ifPresent(this.appLayerTextField::setText);
        settings.getLayerCustomFolderNameBy(LayerType.PAGES).ifPresent(this.pagesLayerTextField::setText);
        settings.getLayerCustomFolderNameBy(LayerType.SHARED).ifPresent(this.sharedLayerTextField::setText);
        settings.getLayerCustomFolderNameBy(LayerType.WIDGETS).ifPresent(this.widgetsLayerTextField::setText);
        settings.getLayerCustomFolderNameBy(LayerType.ENTITIES).ifPresent(this.entitiesLayerTextField::setText);
        settings.getLayerCustomFolderNameBy(LayerType.FEATURES).ifPresent(this.featuresLayerTextField::setText);
        settings.getLayerCustomFolderNameBy(LayerType.PROCESSES).ifPresent(this.processesLayerTextField::setText);

    }

    public boolean isModified(@Nullable ProjectGeneralSettings settings) {
        if (settings == null) {
            return true;
        }
        return !this.getSourceRoot().equals(settings.getSourcesFolder())
                || !this.appLayerTextField.getText().equals(settings.getLayerCustomFolderNameBy(LayerType.APP).orElse(null))
                || !this.pagesLayerTextField.getText().equals(settings.getLayerCustomFolderNameBy(LayerType.PAGES).orElse(null))
                || !this.sharedLayerTextField.getText().equals(settings.getLayerCustomFolderNameBy(LayerType.SHARED).orElse(null))
                || !this.widgetsLayerTextField.getText().equals(settings.getLayerCustomFolderNameBy(LayerType.WIDGETS).orElse(null))
                || !this.entitiesLayerTextField.getText().equals(settings.getLayerCustomFolderNameBy(LayerType.ENTITIES).orElse(null))
                || !this.featuresLayerTextField.getText().equals(settings.getLayerCustomFolderNameBy(LayerType.FEATURES).orElse(null))
                || !this.processesLayerTextField.getText().equals(settings.getLayerCustomFolderNameBy(LayerType.PROCESSES).orElse(null));
    }

    @Override
    public void dispose() {

    }

}
