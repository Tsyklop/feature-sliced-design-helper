package design.featuresliced.helper.gui.form.component;

import com.intellij.ui.table.JBTable;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import design.featuresliced.helper.model.type.template.TemplateStructureVariableType;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.util.Set;

public class TemplateStructureVariableChooserForm {

    private JPanel root;

    private JBTable variablesTable;

    public TemplateStructureVariableChooserForm(Set<TemplateStructureVariableType> usedVariables) {

        DefaultTableModel tableModel = new DefaultTableModel(new String[]{"Name", "Description"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        for (TemplateStructureVariableType variableType : TemplateStructureVariableType.values()) {
            /*if (usedVariables.contains(variableType)) {
                continue;
            }*/
            tableModel.addRow(new Object[]{variableType, variableType});
        }

        this.variablesTable.setShowColumns(true);
        this.variablesTable.setShowVerticalLines(true);
        this.variablesTable.setShowHorizontalLines(true);

        this.variablesTable.setModel(tableModel);

        TableColumnModel tableColumnModel = this.variablesTable.getColumnModel();

        tableColumnModel.getColumn(0).setWidth(140);
        tableColumnModel.getColumn(0).setMinWidth(140);
        tableColumnModel.getColumn(0).setMaxWidth(140);

        tableColumnModel.getColumn(0).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                setValue(((TemplateStructureVariableType) value).getValue());
                return this;
            }
        });

        tableColumnModel.getColumn(1).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                setValue(((TemplateStructureVariableType) value).getDescription());
                return this;
            }
        });

        this.variablesTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        root.setMinimumSize(new Dimension(300, 75));
        root.setPreferredSize(new Dimension(300, 75));
        final JScrollPane scrollPane1 = new JScrollPane();
        root.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        variablesTable = new JBTable();
        scrollPane1.setViewportView(variablesTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    public TemplateStructureVariableType getSelectedVariableType() {
        return (TemplateStructureVariableType) this.variablesTable.getValueAt(
                this.variablesTable.convertRowIndexToModel(this.variablesTable.getSelectedRow()),
                0
        );
    }

}
