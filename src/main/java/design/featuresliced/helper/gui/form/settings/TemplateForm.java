package design.featuresliced.helper.gui.form.settings;

import com.intellij.icons.AllIcons;
import com.intellij.lang.javascript.JavaScriptFileType;
import com.intellij.openapi.actionSystem.ActionPlaces;
import com.intellij.openapi.actionSystem.ActionToolbarPosition;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.editor.event.DocumentEvent;
import com.intellij.openapi.editor.event.DocumentListener;
import com.intellij.openapi.editor.impl.DocumentImpl;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DetailsComponent;
import com.intellij.openapi.ui.popup.JBPopupFactory;
import com.intellij.openapi.ui.popup.ListPopup;
import com.intellij.ui.AnActionButton;
import com.intellij.ui.EditorTextField;
import com.intellij.ui.JBColor;
import com.intellij.ui.JBSplitter;
import com.intellij.ui.OnePixelSplitter;
import com.intellij.ui.ToolbarDecorator;
import com.intellij.ui.treeStructure.Tree;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.util.PlatformIcons;
import com.intellij.util.ui.JBUI;
import design.featuresliced.helper.actions.group.TemplateStructureCreateActionGroup;
import design.featuresliced.helper.gui.dialog.settings.TemplateStructureEditNodeNameDialog;
import design.featuresliced.helper.gui.dialog.settings.confirm.TemplateStructureNodeDeleteConfirmDialog;
import design.featuresliced.helper.model.settings.templates.Template;
import design.featuresliced.helper.model.settings.templates.structure.TemplateStructureNode;
import design.featuresliced.helper.model.type.TemplateStructureNodeType;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import java.awt.*;
import java.util.Optional;

public class TemplateForm {

    private static final Logger log = Logger.getInstance(TemplateForm.class);

    private final Project project;

    private final Template template;

    private final EditorTextField editorTextField;

    private final DetailsComponent detailsComponent;

    private final DefaultTreeModel structureTreeModel;

    private Tree structureTree;

    private JPanel root;

    private JBSplitter splitter;

    private JPanel toolbarPanel;

    private JTextField nameTextField;

    private AnActionButton toolbarAddActionButton;

    private AnActionButton toolbarEditActionButton;

    private AnActionButton toolbarRemoveActionButton;

    private DocumentListener templateDocumentListener;

    public TemplateForm(@NotNull Project project, @NotNull Template template) {
        this.project = project;
        this.template = template;

        this.editorTextField = new EditorTextField(project, JavaScriptFileType.INSTANCE) {
            @Override
            protected boolean shouldHaveBorder() {
                return false;
            }
        };

        this.detailsComponent = new DetailsComponent(false, true);
        this.structureTreeModel = new DefaultTreeModel(null);

        $$$setupUI$$$();

        this.nameTextField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {

            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                template.setName(nameTextField.getText());
            }

        });

        this.detailsComponent.setContent(null);
        this.detailsComponent.setEmptyContentText("Select node from structure");
        this.detailsComponent.setDetailsModeEnabled(false);

        fillFormFromTemplateIfExists();

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        root.setMinimumSize(new Dimension(-1, -1));
        root.setOpaque(true);
        root.setPreferredSize(new Dimension(-1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Name:");
        root.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameTextField = new JTextField();
        nameTextField.setName("templateName");
        root.add(nameTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        root.add(panel1, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        splitter.setName("templateSplitter");
        panel1.add(splitter, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    public JPanel getRoot() {
        return root;
    }

    public JBSplitter getSplitter() {
        return splitter;
    }

    public String getName() {
        return getNameTextField().getText();
    }

    public JTextField getNameTextField() {
        return nameTextField;
    }

    private void createUIComponents() {

        this.splitter = new OnePixelSplitter(0.3F);

        this.structureTreeModel.addTreeModelListener(new TreeModelListener() {

            @Override
            public void treeNodesChanged(TreeModelEvent e) {
            }

            @Override
            public void treeNodesInserted(TreeModelEvent e) {

                DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) e.getTreePath().getLastPathComponent();

                if (parentNode == null) {
                    log.warn("node is null");
                    return;
                }

                TemplateStructureNode templateStructureParentNode = (TemplateStructureNode) parentNode.getUserObject();

                if (templateStructureParentNode == null) {
                    log.warn("templateStructureNode is null");
                    return;
                }

                templateStructureParentNode.addNode((TemplateStructureNode) ((DefaultMutableTreeNode) e.getChildren()[0]).getUserObject());

                template.changeStatusToChangedIfPossible();

            }

            @Override
            public void treeNodesRemoved(TreeModelEvent e) {
                log.info("treeNodesRemoved: " + e);

                DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) e.getTreePath().getLastPathComponent();

                if (parentNode == null) {
                    log.warn("node is null");
                    return;
                }

                TemplateStructureNode templateStructureParentNode = (TemplateStructureNode) parentNode.getUserObject();

                if (templateStructureParentNode == null) {
                    log.warn("templateStructureNode is null");
                    return;
                }

                templateStructureParentNode.removeNode((TemplateStructureNode) ((DefaultMutableTreeNode) e.getChildren()[0]).getUserObject());

                template.changeStatusToChangedIfPossible();

            }

            @Override
            public void treeStructureChanged(TreeModelEvent e) {
            }

        });

        this.structureTree = initStructureTree(this.structureTreeModel);

        this.toolbarPanel = initToolbarPanel(this.structureTree);

        this.toolbarAddActionButton = ToolbarDecorator.findAddButton(this.toolbarPanel);
        this.toolbarEditActionButton = ToolbarDecorator.findEditButton(this.toolbarPanel);
        this.toolbarRemoveActionButton = ToolbarDecorator.findRemoveButton(this.toolbarPanel);

        toggleToolbarButtons(true, false, false);

        JPanel leftPanel = new JPanel(new BorderLayout());

        leftPanel.add(new Label("Structure"), BorderLayout.PAGE_START);
        leftPanel.add(this.toolbarPanel, BorderLayout.CENTER);

        this.splitter.setFirstComponent(leftPanel);

        JPanel rightPanel = new JPanel(new BorderLayout());

        rightPanel.add(new Label("File Template"), BorderLayout.PAGE_START);
        rightPanel.add(this.detailsComponent.getComponent(), BorderLayout.CENTER);

        this.splitter.setSecondComponent(rightPanel);

    }

    private JPanel initToolbarPanel(Tree tree) {

        ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(tree)
                .initPosition()
                .setAddAction(anActionButton -> {

                    ListPopup listPopup = JBPopupFactory.getInstance()
                            .createActionGroupPopup(
                                    "Create",
                                    new TemplateStructureCreateActionGroup(structureTree, project),
                                    anActionButton.getDataContext(),
                                    null,
                                    true,
                                    null,
                                    -1,
                                    null,
                                    ActionPlaces.getActionGroupPopupPlace(null
                                    )
                            );

                    listPopup.show(anActionButton.getPreferredPopupPoint());

                })
                .setEditAction(anActionButton -> {

                    TreePath parentPath = structureTree.getSelectionPath();

                    if (parentPath == null) {
                        return;
                    }

                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) parentPath.getLastPathComponent();

                    TemplateStructureNode templateStructureNode = (TemplateStructureNode) node.getUserObject();

                    TemplateStructureEditNodeNameDialog dialog = new TemplateStructureEditNodeNameDialog(
                            templateStructureNode.getName(),
                            project
                    );

                    if (!dialog.showAndGet()) {
                        return;
                    }

                    templateStructureNode.setName(dialog.getName());
                    template.changeStatusToChangedIfPossible();

                    this.structureTreeModel.nodeChanged(node);

                })
                .setRemoveAction(anActionButton -> {

                    TreePath parentPath = structureTree.getSelectionPath();

                    if (parentPath == null) {
                        return;
                    }

                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) parentPath.getLastPathComponent();

                    TemplateStructureNode templateStructureNode = (TemplateStructureNode) node.getUserObject();

                    if (new TemplateStructureNodeDeleteConfirmDialog(templateStructureNode, project, splitter).showAndGet()) {
                        this.structureTreeModel.removeNodeFromParent((MutableTreeNode) parentPath.getLastPathComponent());
                    }

                })
                .setToolbarPosition(ActionToolbarPosition.TOP);

        return toolbarDecorator.createPanel();

    }

    private Tree initStructureTree(TreeModel treeModel) {

        Tree structureTree = new Tree(treeModel);

        structureTree.setEditable(true);
        structureTree.setRootVisible(true);
        structureTree.setShowsRootHandles(false);
        structureTree.setExpandableItemsEnabled(true);

        DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer() {
            @Override
            public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {
                super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);
                if (value instanceof DefaultMutableTreeNode node) {
                    if (node.getUserObject() instanceof TemplateStructureNode structureNode) {
                        switch (structureNode.getNodeType()) {
                            case FILE -> setIcon(AllIcons.FileTypes.Text);
                            case STYLE -> setIcon(AllIcons.FileTypes.Css);
                            case ROOT, FOLDER -> setIcon(PlatformIcons.FOLDER_ICON);
                        }
                    }
                }
                return this;
            }
        };
        renderer.setLeafIcon(null);
        renderer.setOpenIcon(null);
        renderer.setClosedIcon(null);

        structureTree.setCellRenderer(renderer);

        structureTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        structureTree.getSelectionModel().addTreeSelectionListener(e -> {

            if (this.templateDocumentListener != null) {
                this.editorTextField.getDocument().removeDocumentListener(this.templateDocumentListener);
                this.templateDocumentListener = null;
            }

            DefaultMutableTreeNode selectedNode = ((DefaultMutableTreeNode) this.structureTree.getLastSelectedPathComponent());

            if (selectedNode == null) {
                this.detailsComponent.setContent(null);
                toggleToolbarButtons(true, false, false);
                return;
            }

            TemplateStructureNode templateStructureNode = (TemplateStructureNode) selectedNode.getUserObject();

            if (templateStructureNode == null) {
                resetFileTemplatePanelAndDisableToolbarButtons();
                return;
            }

            if (!templateStructureNode.getNodeType().isFile()) {
                this.detailsComponent.setContent(null);
                toggleToolbarButtons(true);
                return;
            }

            toggleToolbarButtons(false, true, true);

            JPanel jPanel = new JPanel(new GridLayoutManager(1, 1));

            this.editorTextField.setNewDocumentAndFileType(
                    JavaScriptFileType.INSTANCE,
                    new DocumentImpl(Optional.ofNullable(templateStructureNode.getTemplate()).orElse(""))
            );

            this.templateDocumentListener = new DocumentListener() {
                @Override
                public void documentChanged(@NotNull DocumentEvent event) {
                    log.info("Document changed");
                    templateStructureNode.setTemplate(event.getDocument().getText());
                    template.changeStatusToChangedIfPossible();
                }
            };

            this.editorTextField.getDocument().addDocumentListener(this.templateDocumentListener);

            jPanel.add(this.editorTextField.getComponent(), new GridConstraints(
                    0,
                    0,
                    1,
                    1,
                    GridConstraints.ANCHOR_CENTER,
                    GridConstraints.FILL_BOTH,
                    GridConstraints.FILL_HORIZONTAL,
                    GridConstraints.SIZEPOLICY_FIXED,
                    null, null, null, 0, false
            ));

            this.detailsComponent.setContent(jPanel);

            if (this.editorTextField.getEditor() != null) {
                this.editorTextField.getEditor().setBorder(JBUI.Borders.customLine(JBColor.BLACK));
                this.editorTextField.getEditor().getInsets().set(0, 0, 0, 0);
            }

        });

        return structureTree;
    }

    private void toggleToolbarButtons(boolean enabled) {
        toggleToolbarButtons(enabled, enabled, enabled);
    }

    private void toggleToolbarButtons(boolean addEnabled, boolean editEnabled, boolean removeEnabled) {
        toolbarAddActionButton.setEnabled(addEnabled);
        toolbarEditActionButton.setEnabled(editEnabled);
        toolbarRemoveActionButton.setEnabled(removeEnabled);
    }

    private void fillFormFromTemplateIfExists() {

        if (this.template != null) {

            this.nameTextField.setText(this.template.getName());

            this.detailsComponent.setText(this.template.getName() + " template");

            if (this.template.isNew()) {
                this.template.setRootNode(new TemplateStructureNode("<layerName>", TemplateStructureNodeType.ROOT));
            }

            DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(this.template.getRootNode());

            populateNodesTree(rootNode, this.template.getRootNode().getNodes());

            this.structureTreeModel.setRoot(rootNode);


        } else {
            this.detailsComponent.setText("New template");
        }

    }

    private void resetFileTemplatePanelAndDisableToolbarButtons() {
        this.detailsComponent.setContent(null);
        toggleToolbarButtons(false);
    }

    private void populateNodesTree(DefaultMutableTreeNode rootNode, java.util.List<TemplateStructureNode> nodes) {

        for (TemplateStructureNode node: nodes) {
            DefaultMutableTreeNode treeNode = new DefaultMutableTreeNode(node);
            populateNodesTree(treeNode, node.getNodes());
            rootNode.add(treeNode);
        }

    }

}
