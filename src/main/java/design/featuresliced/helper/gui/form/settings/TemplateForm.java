package design.featuresliced.helper.gui.form.settings;

import com.intellij.icons.AllIcons;
import com.intellij.lang.annotation.Annotator;
import com.intellij.openapi.actionSystem.ActionPlaces;
import com.intellij.openapi.actionSystem.ActionToolbarPosition;
import com.intellij.openapi.editor.Editor;
import com.intellij.openapi.editor.EditorBundle;
import com.intellij.openapi.editor.EditorCoreUtil;
import com.intellij.openapi.editor.EditorFactory;
import com.intellij.openapi.editor.EditorKind;
import com.intellij.openapi.editor.actionSystem.EditorActionManager;
import com.intellij.openapi.editor.highlighter.FragmentedEditorHighlighter;
import com.intellij.openapi.editor.impl.EditorImpl;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DetailsComponent;
import com.intellij.openapi.ui.popup.JBPopupFactory;
import com.intellij.openapi.ui.popup.ListPopup;
import com.intellij.ui.AnActionButton;
import com.intellij.ui.JBSplitter;
import com.intellij.ui.OnePixelSplitter;
import com.intellij.ui.SimpleListCellRenderer;
import com.intellij.ui.ToolbarDecorator;
import com.intellij.ui.treeStructure.Tree;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.util.PlatformIcons;
import design.featuresliced.helper.actions.group.TemplateStructureCreateActionGroup;
import design.featuresliced.helper.model.settings.templates.Template;
import design.featuresliced.helper.model.settings.templates.structure.TemplateStructureNode;
import design.featuresliced.helper.model.type.TemplateStructureNodeType;
import design.featuresliced.helper.model.type.fsd.LayerType;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import java.awt.*;
import java.util.Arrays;

public class TemplateForm {

    private final Project project;

    private final Template template;

    private final DefaultTreeModel structureTreeModel;

    private final EditorFactory editorFactory;

    private final DetailsComponent detailsComponent;

    private Tree structureTree;

    private JPanel root;

    private Editor fileEditor;

    private JBSplitter splitter;

    private JPanel toolbarPanel;

    private JTextField nameTextField;

    private JComboBox<LayerType> layerComboBox;

    private AnActionButton toolbarAddActionButton;

    private AnActionButton toolbarRemoveActionButton;

    public TemplateForm(@NotNull Project project, @Nullable Template template) {
        this.project = project;
        this.template = template;
        this.editorFactory = EditorFactory.getInstance();
        this.detailsComponent = new DetailsComponent(true, true);
        this.structureTreeModel = new DefaultTreeModel(null);

        $$$setupUI$$$();

        this.layerComboBox.setRenderer(
                SimpleListCellRenderer.create((label, value, index) -> label.setText(value != null ? value.getLabel() : null))
        );
        Arrays.stream(LayerType.values()).forEach(this.layerComboBox::addItem);

        this.detailsComponent.setContent(null);
        this.detailsComponent.setEmptyContentText("Select node from structure");
        this.detailsComponent.setDetailsModeEnabled(false);

        fillFormFromTemplateIfExists();

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        root.setMinimumSize(new Dimension(-1, -1));
        root.setOpaque(true);
        root.setPreferredSize(new Dimension(-1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Layer:");
        root.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Name:");
        root.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        layerComboBox = new JComboBox();
        layerComboBox.setName("layers");
        root.add(layerComboBox, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameTextField = new JTextField();
        nameTextField.setName("templateName");
        root.add(nameTextField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        root.add(panel1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        splitter.setName("templateSplitter");
        panel1.add(splitter, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    public JPanel getRoot() {
        return root;
    }

    public JBSplitter getSplitter() {
        return splitter;
    }

    public String getName() {
        return getNameTextField().getText();
    }

    public JTextField getNameTextField() {
        return nameTextField;
    }

    public LayerType getLayer() {
        return (LayerType) getLayerComboBox().getSelectedItem();
    }

    public JComboBox<LayerType> getLayerComboBox() {
        return layerComboBox;
    }

    private void createUIComponents() {

        this.splitter = new OnePixelSplitter(0.2F);

        /*this.treeModel.addTreeModelListener(new TreeModelListener() {
            @Override
            public void treeNodesChanged(TreeModelEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) (e.getTreePath().getLastPathComponent());
                try {
                    int index = e.getChildIndices()[0];
                    node = (DefaultMutableTreeNode) (node.getChildAt(index));
                } catch (NullPointerException exc) {
                }

                System.out.println("The user has finished editing the node.");
                System.out.println("New value: " + node.getUserObject());
            }

            @Override
            public void treeNodesInserted(TreeModelEvent e) {

            }

            @Override
            public void treeNodesRemoved(TreeModelEvent e) {

            }

            @Override
            public void treeStructureChanged(TreeModelEvent e) {

            }
        });*/

        this.structureTree = initStructureTree(this.structureTreeModel);

        this.toolbarPanel = initToolbarPanel(this.structureTree);

        this.toolbarAddActionButton = ToolbarDecorator.findAddButton(this.toolbarPanel);
        this.toolbarRemoveActionButton = ToolbarDecorator.findRemoveButton(this.toolbarPanel);

        JPanel leftPanel = new JPanel(new BorderLayout());

        leftPanel.add(new Label("Structure"), BorderLayout.PAGE_START);
        leftPanel.add(this.toolbarPanel, BorderLayout.CENTER);

        this.splitter.setFirstComponent(leftPanel);

        JPanel rightPanel = new JPanel(new BorderLayout());

        rightPanel.add(new Label("File Template"), BorderLayout.PAGE_START);
        rightPanel.add(this.detailsComponent.getComponent(), BorderLayout.CENTER);

        this.splitter.setSecondComponent(rightPanel);

    }

    private JPanel initToolbarPanel(Tree tree) {

        ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(tree)
                .initPosition()
                .setAddAction(anActionButton -> {

                    ListPopup listPopup = JBPopupFactory.getInstance()
                            .createActionGroupPopup(
                                    "Create",
                                    new TemplateStructureCreateActionGroup(structureTree, project),
                                    anActionButton.getDataContext(),
                                    null,
                                    true,
                                    null,
                                    -1,
                                    null,
                                    ActionPlaces.getActionGroupPopupPlace(null
                                    )
                            );

                    listPopup.show(anActionButton.getPreferredPopupPoint());

                    /*String child = RandomStringUtils.randomAlphabetic(10);

                    TreePath parentPath = tree.getSelectionPath();

                    DefaultMutableTreeNode parentNode = null;

                    if (parentPath == null) {
                        //There is no selection. Default to the root node.
                        parentNode = rootNode;
                    } else {
                        parentNode = (DefaultMutableTreeNode) (parentPath.getLastPathComponent());
                    }

                    DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(child);

                    treeModel.insertNodeInto(childNode, parentNode, parentNode.getChildCount());

                    tree.scrollPathToVisible(new TreePath(childNode.getPath()));*/

                })
                .setRemoveAction(anActionButton -> {

                    TreePath parentPath = structureTree.getSelectionPath();

                    if (parentPath == null) {
                        return;
                    }

                    structureTreeModel.removeNodeFromParent((MutableTreeNode) parentPath.getLastPathComponent());

                })
                .setToolbarPosition(ActionToolbarPosition.TOP);

        return toolbarDecorator.createPanel();

    }

    private Tree initStructureTree(TreeModel treeModel) {

        Tree structureTree = new Tree(treeModel);

        structureTree.setEditable(false);
        structureTree.setRootVisible(true);
        structureTree.setShowsRootHandles(false);
        structureTree.setExpandableItemsEnabled(true);

        DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer() {
            @Override
            public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {
                super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);
                if (value instanceof DefaultMutableTreeNode node) {
                    if (node.getUserObject() instanceof TemplateStructureNode structureNode) {
                        switch (structureNode.getNodeType()) {
                            case FILE -> setIcon(AllIcons.FileTypes.Text);
                            case FOLDER -> setIcon(PlatformIcons.FOLDER_ICON);
                        }
                    }
                }
                return this;
            }
        };
        renderer.setLeafIcon(null);
        renderer.setOpenIcon(null);
        renderer.setClosedIcon(null);

        structureTree.setCellRenderer(renderer);

        structureTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        structureTree.getSelectionModel().addTreeSelectionListener(e -> {

            // TODO

            if (this.fileEditor != null) {
                this.editorFactory.releaseEditor(this.fileEditor);
                this.fileEditor = null;
            }

            DefaultMutableTreeNode selectedNode = ((DefaultMutableTreeNode) this.structureTree.getLastSelectedPathComponent());

            if (selectedNode == null) {
                resetFileTemplatePanelAndDisableToolbarButtons();
                return;
            }

            TemplateStructureNode templateStructureNode = (TemplateStructureNode) selectedNode.getUserObject();

            if (templateStructureNode == null) {
                resetFileTemplatePanelAndDisableToolbarButtons();
                return;
            }

            if (!templateStructureNode.getNodeType().isFile()) {
                this.detailsComponent.setContent(null);
                toggleToolbarButtons(true);
                return;
            }

            toggleToolbarButtons(false);

            JPanel jPanel = new JPanel(new GridLayoutManager(1, 1));

            this.fileEditor = this.editorFactory.createEditor(this.editorFactory.createDocument(""), this.project, EditorKind.MAIN_EDITOR);

            jPanel.add(this.fileEditor.getComponent(), new GridConstraints(
                    0,
                    0,
                    1,
                    1,
                    GridConstraints.ANCHOR_CENTER,
                    GridConstraints.FILL_BOTH,
                    GridConstraints.FILL_HORIZONTAL,
                    GridConstraints.SIZEPOLICY_FIXED,
                    null, null, null, 0, false
            ));

            this.detailsComponent.setContent(jPanel);

        });

        return structureTree;
    }

    private void toggleToolbarButtons(boolean enabled) {
        toggleToolbarButtons(enabled, enabled);
    }

    private void toggleToolbarButtons(boolean addEnabled, boolean removeEnabled) {
        toolbarAddActionButton.setEnabled(addEnabled);
        toolbarRemoveActionButton.setEnabled(removeEnabled);
    }

    private void fillFormFromTemplateIfExists() {

        if (this.template != null && this.template.getLayer() != null) {

            this.nameTextField.setText(this.template.getName());
            this.layerComboBox.setSelectedItem(this.template.getLayer());

            // TODO fill structure

            this.detailsComponent.setText(this.template.getName() + " template");

            this.structureTreeModel.setRoot(new DefaultMutableTreeNode(new TemplateStructureNode("<layerName>", TemplateStructureNodeType.ROOT)));

        } else {
            this.detailsComponent.setText("New template");
        }

    }

    private void resetFileTemplatePanelAndDisableToolbarButtons() {
        this.detailsComponent.setContent(null);
        toggleToolbarButtons(false);
    }

}
