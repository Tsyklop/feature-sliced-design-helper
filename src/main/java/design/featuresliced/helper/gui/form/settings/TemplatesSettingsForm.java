package design.featuresliced.helper.gui.form.settings;

import com.intellij.openapi.actionSystem.ActionToolbarPosition;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.DetailsComponent;
import com.intellij.ui.CollectionListModel;
import com.intellij.ui.OnePixelSplitter;
import com.intellij.ui.SimpleListCellRenderer;
import com.intellij.ui.ToolbarDecorator;
import com.intellij.ui.components.JBList;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import design.featuresliced.helper.model.settings.templates.Template;
import design.featuresliced.helper.model.type.fsd.LayerType;

import javax.swing.*;
import java.awt.*;

public class TemplatesSettingsForm {

    private final Project project;

    private final DetailsComponent detailsComponent;

    private JPanel root;

    private JPanel templatesListPanel;

    private OnePixelSplitter splitter;

    private JBList<Template> templatesList;

    public TemplatesSettingsForm(Project project) {
        this.project = project;
        this.detailsComponent = new DetailsComponent(true, true);

        CollectionListModel<Template> templatesListModel = new CollectionListModel<>();

        templatesList = new JBList<>(templatesListModel);
        templatesList.setName("templatesList");

        templatesList.setCellRenderer(
                SimpleListCellRenderer.create((label, value, index) -> label.setText(value != null ? value.getName() : null))
        );

        $$$setupUI$$$();

        templatesList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        templatesList.getSelectionModel().addListSelectionListener(e -> {
            Template selectedTemplate = templatesList.getSelectedValue();
            if (selectedTemplate != null) {
                detailsComponent.setContent(new TemplateForm(project, selectedTemplate).getRoot());
            } else {
                detailsComponent.setContent(null);
            }
        });

        ToolbarDecorator templatesListToolbarDecorator = ToolbarDecorator.createDecorator(templatesList)
                .initPosition()
                .setAddAction(anActionButton -> {

                })
                .setRemoveAction(anActionButton -> {

                })
                .setToolbarPosition(ActionToolbarPosition.TOP);

        templatesListPanel = templatesListToolbarDecorator.createPanel();
        templatesListPanel.setName("templatesListPanel");

        splitter.setFirstComponent(templatesListPanel);

        detailsComponent.setEmptyContentText("Select template");
        detailsComponent.setContent(null);

        JPanel rootRightPanel = new JPanel(new BorderLayout());
        rootRightPanel.setName("rootRightPanel");
        rootRightPanel.add(detailsComponent.getComponent(), BorderLayout.CENTER);

        splitter.setSecondComponent(rootRightPanel);

        templatesListModel.add(new Template("test1", LayerType.PAGES));
        templatesListModel.add(new Template("test2", LayerType.ENTITIES));

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        root.setMinimumSize(new Dimension(-1, -1));
        root.setName("root");
        root.setPreferredSize(new Dimension(-1, -1));
        splitter.setName("rootSplitter");
        root.add(splitter, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        splitter = new OnePixelSplitter(0.210f);
    }
}
